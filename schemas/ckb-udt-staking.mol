/* Basic Types */

// The `UintN` is used to store a `N` bits unsigned integer
// as a byte array in little endian.
array Uint8 [byte; 1];
array Uint32 [byte; 4];
array Uint64 [byte; 8];
array Uint128 [byte; 16];
array Byte32 [byte; 32];
array Uint256 [byte; 32];

vector Bytes <byte>;
option BytesOpt (Bytes);
vector BytesOptVec <BytesOpt>;
vector BytesVec <Bytes>;
vector Byte32Vec <Byte32>;
option Byte32Opt (Byte32);
vector Uint128Vec <Uint128>;

/* Types for Chain */

option ScriptOpt (Script);

array ProposalShortId [byte; 10];

vector UncleBlockVec <UncleBlock>;
vector TransactionVec <Transaction>;
vector ProposalShortIdVec <ProposalShortId>;
vector CellDepVec <CellDep>;
vector CellInputVec <CellInput>;
vector CellOutputVec <CellOutput>;

table Script {
    code_hash:      Byte32,
    hash_type:      byte,
    args:           Bytes,
}

struct OutPoint {
    tx_hash:        Byte32,
    index:          Uint32,
}

struct CellInput {
    since:           Uint64,
    previous_output: OutPoint,
}

table CellOutput {
    capacity:       Uint64,
    lock:           Script,
    type_:          ScriptOpt,
}

struct CellDep {
    out_point:      OutPoint,
    dep_type:       byte,
}

table RawTransaction {
    version:        Uint32,
    cell_deps:      CellDepVec,
    header_deps:    Byte32Vec,
    inputs:         CellInputVec,
    outputs:        CellOutputVec,
    outputs_data:   BytesVec,
}

table Transaction {
    raw:            RawTransaction,
    witnesses:      BytesVec,
}

struct RawHeader {
    version:                Uint32,
    compact_target:         Uint32,
    timestamp:              Uint64,
    number:                 Uint64,
    epoch:                  Uint64,
    parent_hash:            Byte32,
    transactions_root:      Byte32,
    proposals_hash:         Byte32,
    extra_hash:             Byte32,
    dao:                    Byte32,
}

struct Header {
    raw:                    RawHeader,
    nonce:                  Uint128,
}

table UncleBlock {
    header:                 Header,
    proposals:              ProposalShortIdVec,
}

table Block {
    header:                 Header,
    uncles:                 UncleBlockVec,
    transactions:           TransactionVec,
    proposals:              ProposalShortIdVec,
}

table BlockV1 {
    header:                 Header,
    uncles:                 UncleBlockVec,
    transactions:           TransactionVec,
    proposals:              ProposalShortIdVec,
    extension:              Bytes,
}

table CellbaseWitness {
    lock:    Script,
    message: Bytes,
}

table WitnessArgs {
    lock:                   BytesOpt,          // Lock args
    input_type:             BytesOpt,          // Type args for input
    output_type:            BytesOpt,          // Type args for output
}

vector ScriptVec <Script>;

// Schemas for UDT Staking Program

table UDTFunding {
    udt_script: Script,
    amount: Uint128,
}

vector UDTFundingVec <UDTFunding>;

// Program funding information
table AssetList {
    ckb_amount: Uint64,        // Total funding target for the program
    nft_assets: ScriptVec,     // NFT assets to be managed by program
    udt_assets: UDTFundingVec, // UDT assets to be managed by campaign
}

// Schemas for CKB UDT Staking Protocol Data

table ProgramMetadata {
    name: Bytes,
    description: Bytes,
    website: BytesOpt,
    logo_url: BytesOpt,
}

vector ProgramDataVec <ProgramData>;

table ProgramData {
    id: Byte32,
    creator: Script,
    metadata: ProgramMetadata,
    status: byte,       // 0=created, 1=funding, 2=reviewing, 3=approved, 4=active, 5=completed
}

table ProgramConfig {
    // Target token configuration
    target_token_script: Script,        // UDT token to encourage staking
    target_token_type: byte,            // 0=regular, 1=LP token
    min_stake_amount: Uint128,          // Minimum staking amount (0 for no minimum)
    
    // Reward model configuration  
    reward_type: byte,                  // 0=possession-based, 1=liquid staking
    reward_token_script: ScriptOpt,     // Reward token (optional, defaults to target)
    
    // Distribution configuration
    distribution_type: byte,            // 0=single, 1=periodic
    distribution_mode: byte,            // 0=proportional, 1=even
    snapshot_interval: Uint32,          // Snapshot interval in seconds
    
    // Program duration and periods
    program_duration: Uint64,           // Total program duration in seconds
    period_duration: Uint64,            // Duration of each period in seconds
    period_count: Uint32,               // Number of periods (0=unlimited)
    
    // Security and lock configuration
    time_lock_option: byte,             // 0=none, 1=snapshot, 2=distribution, 3=final
    creator_lock: Script,               // Program creator's lock script
    admin_lock_hashes: Byte32Vec,       // Admin lock hashes for program control
    
    // Metadata
    description: Bytes,                 // Program description
    created_at: Uint64,                 // Creation timestamp  
    locked_at: Uint64,                  // Configuration lock timestamp
}

table ProtocolData {
    programs_approved: ProgramDataVec,
    endorsers_whitelist: Byte32Vec,
    last_updated: Uint64,
    protocol_config: ProtocolConfig,
}

table ProtocolConfig {
    admin_lock_hash_vec: Byte32Vec,
    script_code_hashes: ScriptCodeHashes,
}

table ScriptCodeHashes {
    ckb_boost_protocol_type_code_hash: Byte32,
    ckb_boost_protocol_lock_code_hash: Byte32,
    ckb_boost_campaign_type_code_hash: Byte32,
    ckb_boost_campaign_lock_code_hash: Byte32,
    ckb_boost_user_type_code_hash: Byte32,
}